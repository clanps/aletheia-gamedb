name: Publish Release Builds
on:
  workflow_dispatch:
    inputs:
      version:
        type: string
        description: Version to release.
        required: true

jobs:
  build_linux:
    strategy:
      matrix:
        include:
          - os: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            artifact: aletheia-linux-x64
          - os: ubuntu-22.04-arm
            target: aarch64-unknown-linux-gnu
            artifact: aletheia-linux-aarch64
    runs-on: ${{ matrix.os }}
    steps:
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies
        run: sudo apt update && sudo apt install -y qt6-base-dev libwayland-dev libgl1-mesa-dev qt6-wayland # TODO: Remove libgl1-mesa-dev and qt6-wayland when upgrading to 24.04

      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.os }}-${{ matrix.target }}

      - name: Build binary
        run: cargo build --release --features updater --target=${{ matrix.target }} && cp target/${{ matrix.target }}/release/aletheia target/${{ matrix.target }}/release/${{ matrix.artifact }}

      - name: Build AppImage
        run: |
          mkdir -p target/appimage/{deps,out}
          mkdir -p target/appimage/out/usr/share/metainfo

          ARCH=$(uname -m)
          RELEASE_ARCH=${{ matrix.target == 'x86_64-unknown-linux-gnu' && 'x64' || 'aarch64' }}
          APPIMAGETOOL="target/appimage/deps/appimagetool-$ARCH.AppImage"
          LINUXDEPLOY="target/appimage/deps/linuxdeploy-$ARCH.AppImage"
          LINUXDEPLOY_PLUGIN_QT="target/appimage/deps/linuxdeploy-plugin-qt-$ARCH.AppImage"

          wget -O "$APPIMAGETOOL" "https://github.com/AppImage/appimagetool/releases/download/continuous/appimagetool-$ARCH.AppImage"
          chmod +x "$APPIMAGETOOL"

          wget -O "$LINUXDEPLOY" "https://github.com/linuxdeploy/linuxdeploy/releases/download/1-alpha-20250213-2/linuxdeploy-$ARCH.AppImage"
          chmod +x "$LINUXDEPLOY"

          wget -O "$LINUXDEPLOY_PLUGIN_QT" "https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/1-alpha-20250213-1/linuxdeploy-plugin-qt-$ARCH.AppImage"
          chmod +x "$LINUXDEPLOY_PLUGIN_QT"

          echo -e "/usr/lib/qt6/bin\n/usr/lib/$ARCH-linux-gnu" | sudo tee "/usr/lib/$ARCH-linux-gnu/qtchooser/qt6.conf" > /dev/null # https://bugs.launchpad.net/ubuntu/+source/qtchooser/+bug/1964763 (TODO: Remove when upgrading to 24.04, also remove QT_SELECT)

          NO_STRIP=true EXTRA_QT_MODULES=waylandcompositor EXTRA_PLATFORM_PLUGINS="libqwayland-egl.so;libqwayland-generic.so" QT_SELECT=qt6 $LINUXDEPLOY --plugin qt --appdir target/appimage/out --executable target/${{ matrix.target }}/release/aletheia --desktop-file resources/linux/moe.spencer.Aletheia.desktop --icon-file resources/logo/moe.spencer.Aletheia.png
          cp resources/linux/moe.spencer.Aletheia.metainfo.xml target/appimage/out/usr/share/metainfo/moe.spencer.Aletheia.appdata.xml
          $APPIMAGETOOL -u "gh-releases-zsync|${{ github.repository_owner }}|${{ github.event.repository.name }}|latest|aletheia-$RELEASE_ARCH.appimage" target/appimage/out aletheia-$RELEASE_ARCH.appimage

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: target/${{ matrix.target }}/release/${{ matrix.artifact }}

      - name: Upload AppImage
        uses: actions/upload-artifact@v4
        with:
          name: aletheia-${{ matrix.target == 'x86_64-unknown-linux-gnu' && 'x64' || 'aarch64' }}.appimage
          path: |
            aletheia-${{ matrix.target == 'x86_64-unknown-linux-gnu' && 'x64' || 'aarch64' }}.appimage
            aletheia-${{ matrix.target == 'x86_64-unknown-linux-gnu' && 'x64' || 'aarch64' }}.appimage.zsync

  build_windows:
    runs-on: windows-2022
    steps:
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: windows

      - name: Build x64
        run: cargo build --release --features updater --target=x86_64-pc-windows-msvc; Rename-Item "target\x86_64-pc-windows-msvc\release\aletheia.exe" "aletheia-windows-x64.exe"

      - name: Build ARM
        run: rustup target add aarch64-pc-windows-msvc; cargo build --release --features updater --target aarch64-pc-windows-msvc; Rename-Item "target\aarch64-pc-windows-msvc\release\aletheia.exe" "aletheia-windows-aarch64.exe"

      - name: Upload x64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: aletheia-windows-x64.exe
          path: target/x86_64-pc-windows-msvc/release/aletheia-windows-x64.exe

      - name: Upload ARM artifact
        uses: actions/upload-artifact@v4
        with:
          name: aletheia-windows-aarch64.exe
          path: target/aarch64-pc-windows-msvc/release/aletheia-windows-aarch64.exe

  build_flatpak:
    strategy:
      matrix:
        include:
          - os: ubuntu-24.04
            arch: x86_64
          - os: ubuntu-24.04-arm
            arch: aarch64
    runs-on: ${{ matrix.os }}
    steps:
      - name: Install dependencies
        run: sudo apt update && sudo apt install -y flatpak-builder && flatpak remote-add --if-not-exists --user flathub https://dl.flathub.org/repo/flathub.flatpakrepo

      - name: Checkout code
        uses: actions/checkout@v5

      - name: Build
        run: |
          flatpak-builder --user --force-clean --install-deps-from=flathub --repo=repo builddir resources/flatpak/moe.spencer.Aletheia.yaml
          flatpak build-bundle repo aletheia-${{ matrix.arch }}.flatpak moe.spencer.Aletheia --runtime-repo=https://flathub.org/repo/flathub.flatpakrepo

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: aletheia-${{ matrix.arch }}.flatpak
          path: aletheia-${{ matrix.arch }}.flatpak

  build_mac:
    strategy:
      matrix:
        include:
          - os: macos-14
            target: aarch64-apple-darwin
            artifact: aletheia.app
    runs-on: ${{ matrix.os }}
    steps:
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies
        run: brew update && brew install qt@6

      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.os }}-${{ matrix.target }}

      - name: Build
        run: cargo build --release --features updater --target=${{ matrix.target }}

      - name: Create app bundle
        run: |
          mkdir -p ${{ matrix.artifact }}/Contents/{MacOS,Resources}
          cp target/${{ matrix.target }}/release/aletheia ${{ matrix.artifact }}/Contents/MacOS/aletheia
          cp resources/mac/aletheia.icns ${{ matrix.artifact }}/Contents/Resources
          cp resources/mac/Info.plist ${{ matrix.artifact }}/Contents
          macdeployqt ${{ matrix.artifact }} -no-plugins
          codesign -s - --deep -f ${{ matrix.artifact }}
          tar -czf ${{ matrix.artifact }}.tar.gz ${{ matrix.artifact }}

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}.tar.gz
          path: ${{ matrix.artifact }}.tar.gz

  generate_license_file:
    runs-on: ubuntu-24.04
    steps:
      - name: Install cargo-about
        run: cargo install cargo-about

      - name: Checkout code
        uses: actions/checkout@v5

      - name: Generate license file
        run: cargo about generate about.hbs > THIRD_PARTY_LICENSES.html

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: THIRD_PARTY_LICENSES.html
          path: THIRD_PARTY_LICENSES.html

  create_release:
    needs: [build_linux, build_windows, build_flatpak, build_mac, generate_license_file]
    runs-on: ubuntu-24.04
    permissions:
      contents: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          path: artifacts

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.version }}
          name: ${{ inputs.version }}
          files: artifacts/**/*
